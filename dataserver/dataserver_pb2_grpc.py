# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataserver_pb2 as dataserver__pb2


class dataserverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.mkdir = channel.unary_unary(
                '/lightdfs.dataserver/mkdir',
                request_serializer=dataserver__pb2.mkdirRequest.SerializeToString,
                response_deserializer=dataserver__pb2.response.FromString,
                )
        self.ls = channel.unary_unary(
                '/lightdfs.dataserver/ls',
                request_serializer=dataserver__pb2.lsRequest.SerializeToString,
                response_deserializer=dataserver__pb2.lsResponse.FromString,
                )
        self.rm = channel.unary_unary(
                '/lightdfs.dataserver/rm',
                request_serializer=dataserver__pb2.rmRequest.SerializeToString,
                response_deserializer=dataserver__pb2.response.FromString,
                )
        self.upload = channel.unary_unary(
                '/lightdfs.dataserver/upload',
                request_serializer=dataserver__pb2.uploadRequest.SerializeToString,
                response_deserializer=dataserver__pb2.response.FromString,
                )
        self.download = channel.unary_unary(
                '/lightdfs.dataserver/download',
                request_serializer=dataserver__pb2.downloadRequest.SerializeToString,
                response_deserializer=dataserver__pb2.downloadResponse.FromString,
                )
        self.pwd = channel.unary_unary(
                '/lightdfs.dataserver/pwd',
                request_serializer=dataserver__pb2.pwdRequest.SerializeToString,
                response_deserializer=dataserver__pb2.pwdResponse.FromString,
                )
        self.sync = channel.unary_unary(
                '/lightdfs.dataserver/sync',
                request_serializer=dataserver__pb2.syncRequest.SerializeToString,
                response_deserializer=dataserver__pb2.response.FromString,
                )


class dataserverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def mkdir(self, request, context):
        """创建文件夹
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """查询当前目录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rm(self, request, context):
        """删除文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload(self, request, context):
        """上传文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download(self, request, context):
        """下载文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pwd(self, request, context):
        """PWD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sync(self, request, context):
        """同步
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_dataserverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=dataserver__pb2.mkdirRequest.FromString,
                    response_serializer=dataserver__pb2.response.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=dataserver__pb2.lsRequest.FromString,
                    response_serializer=dataserver__pb2.lsResponse.SerializeToString,
            ),
            'rm': grpc.unary_unary_rpc_method_handler(
                    servicer.rm,
                    request_deserializer=dataserver__pb2.rmRequest.FromString,
                    response_serializer=dataserver__pb2.response.SerializeToString,
            ),
            'upload': grpc.unary_unary_rpc_method_handler(
                    servicer.upload,
                    request_deserializer=dataserver__pb2.uploadRequest.FromString,
                    response_serializer=dataserver__pb2.response.SerializeToString,
            ),
            'download': grpc.unary_unary_rpc_method_handler(
                    servicer.download,
                    request_deserializer=dataserver__pb2.downloadRequest.FromString,
                    response_serializer=dataserver__pb2.downloadResponse.SerializeToString,
            ),
            'pwd': grpc.unary_unary_rpc_method_handler(
                    servicer.pwd,
                    request_deserializer=dataserver__pb2.pwdRequest.FromString,
                    response_serializer=dataserver__pb2.pwdResponse.SerializeToString,
            ),
            'sync': grpc.unary_unary_rpc_method_handler(
                    servicer.sync,
                    request_deserializer=dataserver__pb2.syncRequest.FromString,
                    response_serializer=dataserver__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.dataserver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class dataserver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/mkdir',
            dataserver__pb2.mkdirRequest.SerializeToString,
            dataserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/ls',
            dataserver__pb2.lsRequest.SerializeToString,
            dataserver__pb2.lsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/rm',
            dataserver__pb2.rmRequest.SerializeToString,
            dataserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/upload',
            dataserver__pb2.uploadRequest.SerializeToString,
            dataserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/download',
            dataserver__pb2.downloadRequest.SerializeToString,
            dataserver__pb2.downloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pwd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/pwd',
            dataserver__pb2.pwdRequest.SerializeToString,
            dataserver__pb2.pwdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.dataserver/sync',
            dataserver__pb2.syncRequest.SerializeToString,
            dataserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
