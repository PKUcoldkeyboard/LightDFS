# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataserver_pb2 as dataserver__pb2


class DataServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFile = channel.unary_unary(
                '/lightdfs.DataServer/CreateFile',
                request_serializer=dataserver__pb2.CreateFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.ListFile = channel.unary_unary(
                '/lightdfs.DataServer/ListFile',
                request_serializer=dataserver__pb2.ListFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.ListFileResponse.FromString,
                )
        self.CreateDirectory = channel.unary_unary(
                '/lightdfs.DataServer/CreateDirectory',
                request_serializer=dataserver__pb2.CreateDirectoryRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.DeleteFile = channel.unary_unary(
                '/lightdfs.DataServer/DeleteFile',
                request_serializer=dataserver__pb2.DeleteFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.RenameFile = channel.unary_unary(
                '/lightdfs.DataServer/RenameFile',
                request_serializer=dataserver__pb2.RenameFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.ReadFile = channel.unary_unary(
                '/lightdfs.DataServer/ReadFile',
                request_serializer=dataserver__pb2.ReadFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.ReadFileResponse.FromString,
                )
        self.ChmodFile = channel.unary_unary(
                '/lightdfs.DataServer/ChmodFile',
                request_serializer=dataserver__pb2.ChmodFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.LockDirectory = channel.unary_unary(
                '/lightdfs.DataServer/LockDirectory',
                request_serializer=dataserver__pb2.LockDirectoryRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.UnlockDirectory = channel.unary_unary(
                '/lightdfs.DataServer/UnlockDirectory',
                request_serializer=dataserver__pb2.UnlockDirectoryRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.UploadFile = channel.stream_unary(
                '/lightdfs.DataServer/UploadFile',
                request_serializer=dataserver__pb2.UploadFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.BaseResponse.FromString,
                )
        self.DownloadFile = channel.unary_stream(
                '/lightdfs.DataServer/DownloadFile',
                request_serializer=dataserver__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=dataserver__pb2.DownloadFileResponse.FromString,
                )


class DataServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateFile(self, request, context):
        """创建文件，对应touch命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFile(self, request, context):
        """列出文件，对应ls命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDirectory(self, request, context):
        """创建文件夹，对应mkdir命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """删除文件，对应rm命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameFile(self, request, context):
        """重命名或移动文件，对应mv命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFile(self, request, context):
        """读取文件，对应cat命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChmodFile(self, request, context):
        """chmod命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockDirectory(self, request, context):
        """对文件夹上锁
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockDirectory(self, request, context):
        """解锁文件夹
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """上传文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """下载文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=dataserver__pb2.CreateFileRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'ListFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFile,
                    request_deserializer=dataserver__pb2.ListFileRequest.FromString,
                    response_serializer=dataserver__pb2.ListFileResponse.SerializeToString,
            ),
            'CreateDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDirectory,
                    request_deserializer=dataserver__pb2.CreateDirectoryRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=dataserver__pb2.DeleteFileRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'RenameFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameFile,
                    request_deserializer=dataserver__pb2.RenameFileRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'ReadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFile,
                    request_deserializer=dataserver__pb2.ReadFileRequest.FromString,
                    response_serializer=dataserver__pb2.ReadFileResponse.SerializeToString,
            ),
            'ChmodFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ChmodFile,
                    request_deserializer=dataserver__pb2.ChmodFileRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'LockDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.LockDirectory,
                    request_deserializer=dataserver__pb2.LockDirectoryRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'UnlockDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockDirectory,
                    request_deserializer=dataserver__pb2.UnlockDirectoryRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=dataserver__pb2.UploadFileRequest.FromString,
                    response_serializer=dataserver__pb2.BaseResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=dataserver__pb2.DownloadFileRequest.FromString,
                    response_serializer=dataserver__pb2.DownloadFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.DataServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/CreateFile',
            dataserver__pb2.CreateFileRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/ListFile',
            dataserver__pb2.ListFileRequest.SerializeToString,
            dataserver__pb2.ListFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/CreateDirectory',
            dataserver__pb2.CreateDirectoryRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/DeleteFile',
            dataserver__pb2.DeleteFileRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/RenameFile',
            dataserver__pb2.RenameFileRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/ReadFile',
            dataserver__pb2.ReadFileRequest.SerializeToString,
            dataserver__pb2.ReadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChmodFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/ChmodFile',
            dataserver__pb2.ChmodFileRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/LockDirectory',
            dataserver__pb2.LockDirectoryRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.DataServer/UnlockDirectory',
            dataserver__pb2.UnlockDirectoryRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/lightdfs.DataServer/UploadFile',
            dataserver__pb2.UploadFileRequest.SerializeToString,
            dataserver__pb2.BaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lightdfs.DataServer/DownloadFile',
            dataserver__pb2.DownloadFileRequest.SerializeToString,
            dataserver__pb2.DownloadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
