# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nameserver_pb2 as nameserver__pb2


class NameServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFile = channel.unary_unary(
                '/lightdfs.NameServer/CreateFile',
                request_serializer=nameserver__pb2.CreateFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.CreateFileResponse.FromString,
                )
        self.AddBlock = channel.unary_unary(
                '/lightdfs.NameServer/AddBlock',
                request_serializer=nameserver__pb2.AddBlockRequest.SerializeToString,
                response_deserializer=nameserver__pb2.AddBlockResponse.FromString,
                )
        self.GetFileLocation = channel.unary_unary(
                '/lightdfs.NameServer/GetFileLocation',
                request_serializer=nameserver__pb2.FileLocationRequest.SerializeToString,
                response_deserializer=nameserver__pb2.FileLocationResponse.FromString,
                )
        self.ListDirectory = channel.unary_unary(
                '/lightdfs.NameServer/ListDirectory',
                request_serializer=nameserver__pb2.ListDirectoryRequest.SerializeToString,
                response_deserializer=nameserver__pb2.ListDirectoryResponse.FromString,
                )
        self.Stat = channel.unary_unary(
                '/lightdfs.NameServer/Stat',
                request_serializer=nameserver__pb2.StatRequest.SerializeToString,
                response_deserializer=nameserver__pb2.StatResponse.FromString,
                )
        self.Rename = channel.unary_unary(
                '/lightdfs.NameServer/Rename',
                request_serializer=nameserver__pb2.RenameRequest.SerializeToString,
                response_deserializer=nameserver__pb2.RenameResponse.FromString,
                )
        self.SyncBlock = channel.unary_unary(
                '/lightdfs.NameServer/SyncBlock',
                request_serializer=nameserver__pb2.SyncBlockRequest.SerializeToString,
                response_deserializer=nameserver__pb2.SyncBlockResponse.FromString,
                )
        self.FinishBlock = channel.unary_unary(
                '/lightdfs.NameServer/FinishBlock',
                request_serializer=nameserver__pb2.FinishBlockRequest.SerializeToString,
                response_deserializer=nameserver__pb2.FinishBlockResponse.FromString,
                )
        self.Unlink = channel.unary_unary(
                '/lightdfs.NameServer/Unlink',
                request_serializer=nameserver__pb2.UnlinkRequest.SerializeToString,
                response_deserializer=nameserver__pb2.UnlinkResponse.FromString,
                )
        self.DeleteDirectory = channel.unary_unary(
                '/lightdfs.NameServer/DeleteDirectory',
                request_serializer=nameserver__pb2.DeleteDirectoryRequest.SerializeToString,
                response_deserializer=nameserver__pb2.DeleteDirectoryResponse.FromString,
                )
        self.ChangeReplicaNum = channel.unary_unary(
                '/lightdfs.NameServer/ChangeReplicaNum',
                request_serializer=nameserver__pb2.ChangeReplicaNumRequest.SerializeToString,
                response_deserializer=nameserver__pb2.ChangeReplicaNumResponse.FromString,
                )
        self.ShutdownChunkServer = channel.unary_unary(
                '/lightdfs.NameServer/ShutdownChunkServer',
                request_serializer=nameserver__pb2.ShutdownChunkServerRequest.SerializeToString,
                response_deserializer=nameserver__pb2.ShutdownChunkServerResponse.FromString,
                )
        self.ShutdownChunkServerStat = channel.unary_unary(
                '/lightdfs.NameServer/ShutdownChunkServerStat',
                request_serializer=nameserver__pb2.ShutdownChunkServerStatRequest.SerializeToString,
                response_deserializer=nameserver__pb2.ShutdownChunkServerStatResponse.FromString,
                )
        self.DiskUsage = channel.unary_unary(
                '/lightdfs.NameServer/DiskUsage',
                request_serializer=nameserver__pb2.DiskUsageRequest.SerializeToString,
                response_deserializer=nameserver__pb2.DiskUsageResponse.FromString,
                )
        self.Register = channel.unary_unary(
                '/lightdfs.NameServer/Register',
                request_serializer=nameserver__pb2.RegisterRequest.SerializeToString,
                response_deserializer=nameserver__pb2.RegisterResponse.FromString,
                )
        self.HeartBeat = channel.unary_unary(
                '/lightdfs.NameServer/HeartBeat',
                request_serializer=nameserver__pb2.HeartBeatRequest.SerializeToString,
                response_deserializer=nameserver__pb2.HeartBeatResponse.FromString,
                )
        self.BlockReport = channel.unary_unary(
                '/lightdfs.NameServer/BlockReport',
                request_serializer=nameserver__pb2.BlockReportRequest.SerializeToString,
                response_deserializer=nameserver__pb2.BlockReportResponse.FromString,
                )
        self.BlockReceived = channel.unary_unary(
                '/lightdfs.NameServer/BlockReceived',
                request_serializer=nameserver__pb2.BlockReceivedRequest.SerializeToString,
                response_deserializer=nameserver__pb2.BlockReceivedResponse.FromString,
                )
        self.PushBlockReport = channel.unary_unary(
                '/lightdfs.NameServer/PushBlockReport',
                request_serializer=nameserver__pb2.PushBlockReportRequest.SerializeToString,
                response_deserializer=nameserver__pb2.PushBlockReportResponse.FromString,
                )
        self.SysStat = channel.unary_unary(
                '/lightdfs.NameServer/SysStat',
                request_serializer=nameserver__pb2.SysStatRequest.SerializeToString,
                response_deserializer=nameserver__pb2.SysStatResponse.FromString,
                )
        self.Chmod = channel.unary_unary(
                '/lightdfs.NameServer/Chmod',
                request_serializer=nameserver__pb2.ChmodRequest.SerializeToString,
                response_deserializer=nameserver__pb2.ChmodResponse.FromString,
                )
        self.Symlink = channel.unary_unary(
                '/lightdfs.NameServer/Symlink',
                request_serializer=nameserver__pb2.SymlinkRequest.SerializeToString,
                response_deserializer=nameserver__pb2.SymlinkResponse.FromString,
                )
        self.LockDir = channel.unary_unary(
                '/lightdfs.NameServer/LockDir',
                request_serializer=nameserver__pb2.LockDirRequest.SerializeToString,
                response_deserializer=nameserver__pb2.LockDirResponse.FromString,
                )
        self.UnlockDir = channel.unary_unary(
                '/lightdfs.NameServer/UnlockDir',
                request_serializer=nameserver__pb2.UnlockDirRequest.SerializeToString,
                response_deserializer=nameserver__pb2.UnlockDirResponse.FromString,
                )


class NameServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeReplicaNum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownChunkServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownChunkServerStat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiskUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockReceived(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushBlockReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SysStat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chmod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Symlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockDir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=nameserver__pb2.CreateFileRequest.FromString,
                    response_serializer=nameserver__pb2.CreateFileResponse.SerializeToString,
            ),
            'AddBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBlock,
                    request_deserializer=nameserver__pb2.AddBlockRequest.FromString,
                    response_serializer=nameserver__pb2.AddBlockResponse.SerializeToString,
            ),
            'GetFileLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileLocation,
                    request_deserializer=nameserver__pb2.FileLocationRequest.FromString,
                    response_serializer=nameserver__pb2.FileLocationResponse.SerializeToString,
            ),
            'ListDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDirectory,
                    request_deserializer=nameserver__pb2.ListDirectoryRequest.FromString,
                    response_serializer=nameserver__pb2.ListDirectoryResponse.SerializeToString,
            ),
            'Stat': grpc.unary_unary_rpc_method_handler(
                    servicer.Stat,
                    request_deserializer=nameserver__pb2.StatRequest.FromString,
                    response_serializer=nameserver__pb2.StatResponse.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=nameserver__pb2.RenameRequest.FromString,
                    response_serializer=nameserver__pb2.RenameResponse.SerializeToString,
            ),
            'SyncBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncBlock,
                    request_deserializer=nameserver__pb2.SyncBlockRequest.FromString,
                    response_serializer=nameserver__pb2.SyncBlockResponse.SerializeToString,
            ),
            'FinishBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishBlock,
                    request_deserializer=nameserver__pb2.FinishBlockRequest.FromString,
                    response_serializer=nameserver__pb2.FinishBlockResponse.SerializeToString,
            ),
            'Unlink': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlink,
                    request_deserializer=nameserver__pb2.UnlinkRequest.FromString,
                    response_serializer=nameserver__pb2.UnlinkResponse.SerializeToString,
            ),
            'DeleteDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDirectory,
                    request_deserializer=nameserver__pb2.DeleteDirectoryRequest.FromString,
                    response_serializer=nameserver__pb2.DeleteDirectoryResponse.SerializeToString,
            ),
            'ChangeReplicaNum': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeReplicaNum,
                    request_deserializer=nameserver__pb2.ChangeReplicaNumRequest.FromString,
                    response_serializer=nameserver__pb2.ChangeReplicaNumResponse.SerializeToString,
            ),
            'ShutdownChunkServer': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownChunkServer,
                    request_deserializer=nameserver__pb2.ShutdownChunkServerRequest.FromString,
                    response_serializer=nameserver__pb2.ShutdownChunkServerResponse.SerializeToString,
            ),
            'ShutdownChunkServerStat': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownChunkServerStat,
                    request_deserializer=nameserver__pb2.ShutdownChunkServerStatRequest.FromString,
                    response_serializer=nameserver__pb2.ShutdownChunkServerStatResponse.SerializeToString,
            ),
            'DiskUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.DiskUsage,
                    request_deserializer=nameserver__pb2.DiskUsageRequest.FromString,
                    response_serializer=nameserver__pb2.DiskUsageResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=nameserver__pb2.RegisterRequest.FromString,
                    response_serializer=nameserver__pb2.RegisterResponse.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=nameserver__pb2.HeartBeatRequest.FromString,
                    response_serializer=nameserver__pb2.HeartBeatResponse.SerializeToString,
            ),
            'BlockReport': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockReport,
                    request_deserializer=nameserver__pb2.BlockReportRequest.FromString,
                    response_serializer=nameserver__pb2.BlockReportResponse.SerializeToString,
            ),
            'BlockReceived': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockReceived,
                    request_deserializer=nameserver__pb2.BlockReceivedRequest.FromString,
                    response_serializer=nameserver__pb2.BlockReceivedResponse.SerializeToString,
            ),
            'PushBlockReport': grpc.unary_unary_rpc_method_handler(
                    servicer.PushBlockReport,
                    request_deserializer=nameserver__pb2.PushBlockReportRequest.FromString,
                    response_serializer=nameserver__pb2.PushBlockReportResponse.SerializeToString,
            ),
            'SysStat': grpc.unary_unary_rpc_method_handler(
                    servicer.SysStat,
                    request_deserializer=nameserver__pb2.SysStatRequest.FromString,
                    response_serializer=nameserver__pb2.SysStatResponse.SerializeToString,
            ),
            'Chmod': grpc.unary_unary_rpc_method_handler(
                    servicer.Chmod,
                    request_deserializer=nameserver__pb2.ChmodRequest.FromString,
                    response_serializer=nameserver__pb2.ChmodResponse.SerializeToString,
            ),
            'Symlink': grpc.unary_unary_rpc_method_handler(
                    servicer.Symlink,
                    request_deserializer=nameserver__pb2.SymlinkRequest.FromString,
                    response_serializer=nameserver__pb2.SymlinkResponse.SerializeToString,
            ),
            'LockDir': grpc.unary_unary_rpc_method_handler(
                    servicer.LockDir,
                    request_deserializer=nameserver__pb2.LockDirRequest.FromString,
                    response_serializer=nameserver__pb2.LockDirResponse.SerializeToString,
            ),
            'UnlockDir': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockDir,
                    request_deserializer=nameserver__pb2.UnlockDirRequest.FromString,
                    response_serializer=nameserver__pb2.UnlockDirResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.NameServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NameServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/CreateFile',
            nameserver__pb2.CreateFileRequest.SerializeToString,
            nameserver__pb2.CreateFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/AddBlock',
            nameserver__pb2.AddBlockRequest.SerializeToString,
            nameserver__pb2.AddBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFileLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/GetFileLocation',
            nameserver__pb2.FileLocationRequest.SerializeToString,
            nameserver__pb2.FileLocationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/ListDirectory',
            nameserver__pb2.ListDirectoryRequest.SerializeToString,
            nameserver__pb2.ListDirectoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Stat',
            nameserver__pb2.StatRequest.SerializeToString,
            nameserver__pb2.StatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Rename',
            nameserver__pb2.RenameRequest.SerializeToString,
            nameserver__pb2.RenameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/SyncBlock',
            nameserver__pb2.SyncBlockRequest.SerializeToString,
            nameserver__pb2.SyncBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/FinishBlock',
            nameserver__pb2.FinishBlockRequest.SerializeToString,
            nameserver__pb2.FinishBlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Unlink',
            nameserver__pb2.UnlinkRequest.SerializeToString,
            nameserver__pb2.UnlinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/DeleteDirectory',
            nameserver__pb2.DeleteDirectoryRequest.SerializeToString,
            nameserver__pb2.DeleteDirectoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeReplicaNum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/ChangeReplicaNum',
            nameserver__pb2.ChangeReplicaNumRequest.SerializeToString,
            nameserver__pb2.ChangeReplicaNumResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownChunkServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/ShutdownChunkServer',
            nameserver__pb2.ShutdownChunkServerRequest.SerializeToString,
            nameserver__pb2.ShutdownChunkServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownChunkServerStat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/ShutdownChunkServerStat',
            nameserver__pb2.ShutdownChunkServerStatRequest.SerializeToString,
            nameserver__pb2.ShutdownChunkServerStatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiskUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/DiskUsage',
            nameserver__pb2.DiskUsageRequest.SerializeToString,
            nameserver__pb2.DiskUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Register',
            nameserver__pb2.RegisterRequest.SerializeToString,
            nameserver__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/HeartBeat',
            nameserver__pb2.HeartBeatRequest.SerializeToString,
            nameserver__pb2.HeartBeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/BlockReport',
            nameserver__pb2.BlockReportRequest.SerializeToString,
            nameserver__pb2.BlockReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockReceived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/BlockReceived',
            nameserver__pb2.BlockReceivedRequest.SerializeToString,
            nameserver__pb2.BlockReceivedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushBlockReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/PushBlockReport',
            nameserver__pb2.PushBlockReportRequest.SerializeToString,
            nameserver__pb2.PushBlockReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SysStat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/SysStat',
            nameserver__pb2.SysStatRequest.SerializeToString,
            nameserver__pb2.SysStatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Chmod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Chmod',
            nameserver__pb2.ChmodRequest.SerializeToString,
            nameserver__pb2.ChmodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Symlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Symlink',
            nameserver__pb2.SymlinkRequest.SerializeToString,
            nameserver__pb2.SymlinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/LockDir',
            nameserver__pb2.LockDirRequest.SerializeToString,
            nameserver__pb2.LockDirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockDir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/UnlockDir',
            nameserver__pb2.UnlockDirRequest.SerializeToString,
            nameserver__pb2.UnlockDirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
