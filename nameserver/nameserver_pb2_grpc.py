# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nameserver_pb2 as nameserver__pb2


class nameserverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerDataServer = channel.unary_unary(
                '/lightdfs.nameserver/registerDataServer',
                request_serializer=nameserver__pb2.dataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.getDataServerList = channel.unary_unary(
                '/lightdfs.nameserver/getDataServerList',
                request_serializer=nameserver__pb2.empty.SerializeToString,
                response_deserializer=nameserver__pb2.getDataServerListResponse.FromString,
                )
        self.logoutDataServer = channel.unary_unary(
                '/lightdfs.nameserver/logoutDataServer',
                request_serializer=nameserver__pb2.dataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.registerUser = channel.unary_unary(
                '/lightdfs.nameserver/registerUser',
                request_serializer=nameserver__pb2.RegisterRequest.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.login = channel.unary_unary(
                '/lightdfs.nameserver/login',
                request_serializer=nameserver__pb2.LoginRequest.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.setFilePermission = channel.unary_unary(
                '/lightdfs.nameserver/setFilePermission',
                request_serializer=nameserver__pb2.setFilePermissionRequest.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.lockFile = channel.unary_unary(
                '/lightdfs.nameserver/lockFile',
                request_serializer=nameserver__pb2.lockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )
        self.unlockFile = channel.unary_unary(
                '/lightdfs.nameserver/unlockFile',
                request_serializer=nameserver__pb2.unlockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.response.FromString,
                )


class nameserverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerDataServer(self, request, context):
        """注册数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDataServerList(self, request, context):
        """获取数据服务器列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logoutDataServer(self, request, context):
        """下线数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerUser(self, request, context):
        """注册用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFilePermission(self, request, context):
        """设置文件权限
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lockFile(self, request, context):
        """文件锁
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unlockFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_nameserverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.registerDataServer,
                    request_deserializer=nameserver__pb2.dataServerInfo.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'getDataServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.getDataServerList,
                    request_deserializer=nameserver__pb2.empty.FromString,
                    response_serializer=nameserver__pb2.getDataServerListResponse.SerializeToString,
            ),
            'logoutDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.logoutDataServer,
                    request_deserializer=nameserver__pb2.dataServerInfo.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'registerUser': grpc.unary_unary_rpc_method_handler(
                    servicer.registerUser,
                    request_deserializer=nameserver__pb2.RegisterRequest.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=nameserver__pb2.LoginRequest.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'setFilePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.setFilePermission,
                    request_deserializer=nameserver__pb2.setFilePermissionRequest.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'lockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.lockFile,
                    request_deserializer=nameserver__pb2.lockFileRequest.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
            'unlockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.unlockFile,
                    request_deserializer=nameserver__pb2.unlockFileRequest.FromString,
                    response_serializer=nameserver__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.nameserver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class nameserver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/registerDataServer',
            nameserver__pb2.dataServerInfo.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDataServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/getDataServerList',
            nameserver__pb2.empty.SerializeToString,
            nameserver__pb2.getDataServerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logoutDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/logoutDataServer',
            nameserver__pb2.dataServerInfo.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/registerUser',
            nameserver__pb2.RegisterRequest.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/login',
            nameserver__pb2.LoginRequest.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFilePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/setFilePermission',
            nameserver__pb2.setFilePermissionRequest.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/lockFile',
            nameserver__pb2.lockFileRequest.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unlockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/unlockFile',
            nameserver__pb2.unlockFileRequest.SerializeToString,
            nameserver__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
