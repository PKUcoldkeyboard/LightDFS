# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nameserver_pb2 as nameserver__pb2


class NameServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDataServer = channel.unary_unary(
                '/lightdfs.NameServer/RegisterDataServer',
                request_serializer=nameserver__pb2.DataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.GetDataServerList = channel.unary_unary(
                '/lightdfs.NameServer/GetDataServerList',
                request_serializer=nameserver__pb2.empty.SerializeToString,
                response_deserializer=nameserver__pb2.GetDataServerListResponse.FromString,
                )
        self.LogoutDataServer = channel.unary_unary(
                '/lightdfs.NameServer/LogoutDataServer',
                request_serializer=nameserver__pb2.DataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/lightdfs.NameServer/RegisterUser',
                request_serializer=nameserver__pb2.RegisterRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.Login = channel.unary_unary(
                '/lightdfs.NameServer/Login',
                request_serializer=nameserver__pb2.LoginRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.Logout = channel.unary_unary(
                '/lightdfs.NameServer/Logout',
                request_serializer=nameserver__pb2.LogoutRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.LockFile = channel.unary_unary(
                '/lightdfs.NameServer/LockFile',
                request_serializer=nameserver__pb2.LockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.UnlockFile = channel.unary_unary(
                '/lightdfs.NameServer/UnlockFile',
                request_serializer=nameserver__pb2.UnlockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.CheckCache = channel.unary_unary(
                '/lightdfs.NameServer/CheckCache',
                request_serializer=nameserver__pb2.CheckCacheRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.AddFile = channel.unary_unary(
                '/lightdfs.NameServer/AddFile',
                request_serializer=nameserver__pb2.FileInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.DeleteFile = channel.unary_unary(
                '/lightdfs.NameServer/DeleteFile',
                request_serializer=nameserver__pb2.DeleteRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.ModifyFile = channel.unary_unary(
                '/lightdfs.NameServer/ModifyFile',
                request_serializer=nameserver__pb2.FileInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.GetFileInfo = channel.unary_unary(
                '/lightdfs.NameServer/GetFileInfo',
                request_serializer=nameserver__pb2.GetFileInfoRequest.SerializeToString,
                response_deserializer=nameserver__pb2.FileInfo.FromString,
                )


class NameServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDataServer(self, request, context):
        """注册数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataServerList(self, request, context):
        """获取数据服务器列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogoutDataServer(self, request, context):
        """下线数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """注册用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """登出
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockFile(self, request, context):
        """文件锁
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCache(self, request, context):
        """检查缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFile(self, request, context):
        """添加新文件（夹）,提供完整文件信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """删除文件（夹），提供文件路径
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyFile(self, request, context):
        """修改文件（夹），提供原始文件路径，新文件路径，新文件大小，修改时间
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileInfo(self, request, context):
        """获取文件信息， 提供文件路径
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDataServer,
                    request_deserializer=nameserver__pb2.DataServerInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'GetDataServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataServerList,
                    request_deserializer=nameserver__pb2.empty.FromString,
                    response_serializer=nameserver__pb2.GetDataServerListResponse.SerializeToString,
            ),
            'LogoutDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LogoutDataServer,
                    request_deserializer=nameserver__pb2.DataServerInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=nameserver__pb2.RegisterRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=nameserver__pb2.LoginRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=nameserver__pb2.LogoutRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'LockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.LockFile,
                    request_deserializer=nameserver__pb2.LockFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'UnlockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockFile,
                    request_deserializer=nameserver__pb2.UnlockFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'CheckCache': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCache,
                    request_deserializer=nameserver__pb2.CheckCacheRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'AddFile': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFile,
                    request_deserializer=nameserver__pb2.FileInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=nameserver__pb2.DeleteRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'ModifyFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyFile,
                    request_deserializer=nameserver__pb2.FileInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'GetFileInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileInfo,
                    request_deserializer=nameserver__pb2.GetFileInfoRequest.FromString,
                    response_serializer=nameserver__pb2.FileInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.NameServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NameServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/RegisterDataServer',
            nameserver__pb2.DataServerInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/GetDataServerList',
            nameserver__pb2.empty.SerializeToString,
            nameserver__pb2.GetDataServerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogoutDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/LogoutDataServer',
            nameserver__pb2.DataServerInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/RegisterUser',
            nameserver__pb2.RegisterRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Login',
            nameserver__pb2.LoginRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/Logout',
            nameserver__pb2.LogoutRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/LockFile',
            nameserver__pb2.LockFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/UnlockFile',
            nameserver__pb2.UnlockFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/CheckCache',
            nameserver__pb2.CheckCacheRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/AddFile',
            nameserver__pb2.FileInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/DeleteFile',
            nameserver__pb2.DeleteRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/ModifyFile',
            nameserver__pb2.FileInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFileInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.NameServer/GetFileInfo',
            nameserver__pb2.GetFileInfoRequest.SerializeToString,
            nameserver__pb2.FileInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
