# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nameserver_pb2 as nameserver__pb2


class nameserverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDataServer = channel.unary_unary(
                '/lightdfs.nameserver/RegisterDataServer',
                request_serializer=nameserver__pb2.DataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.GetDataServerList = channel.unary_unary(
                '/lightdfs.nameserver/GetDataServerList',
                request_serializer=nameserver__pb2.empty.SerializeToString,
                response_deserializer=nameserver__pb2.GetDataServerListResponse.FromString,
                )
        self.LogoutDataServer = channel.unary_unary(
                '/lightdfs.nameserver/LogoutDataServer',
                request_serializer=nameserver__pb2.DataServerInfo.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/lightdfs.nameserver/RegisterUser',
                request_serializer=nameserver__pb2.RegisterRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.Login = channel.unary_unary(
                '/lightdfs.nameserver/Login',
                request_serializer=nameserver__pb2.LoginRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.LockFile = channel.unary_unary(
                '/lightdfs.nameserver/LockFile',
                request_serializer=nameserver__pb2.LockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.UnlockFile = channel.unary_unary(
                '/lightdfs.nameserver/UnlockFile',
                request_serializer=nameserver__pb2.UnlockFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.CheckFilePermission = channel.unary_unary(
                '/lightdfs.nameserver/CheckFilePermission',
                request_serializer=nameserver__pb2.CheckFilePermissionRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.CheckCache = channel.unary_unary(
                '/lightdfs.nameserver/CheckCache',
                request_serializer=nameserver__pb2.CheckCacheRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.ChownFile = channel.unary_unary(
                '/lightdfs.nameserver/ChownFile',
                request_serializer=nameserver__pb2.ChownFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.ChmodFile = channel.unary_unary(
                '/lightdfs.nameserver/ChmodFile',
                request_serializer=nameserver__pb2.ChmodFileRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )
        self.ChangeGroup = channel.unary_unary(
                '/lightdfs.nameserver/ChangeGroup',
                request_serializer=nameserver__pb2.ChangeGroupRequest.SerializeToString,
                response_deserializer=nameserver__pb2.Response.FromString,
                )


class nameserverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDataServer(self, request, context):
        """注册数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataServerList(self, request, context):
        """获取数据服务器列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogoutDataServer(self, request, context):
        """下线数据服务器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """注册用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockFile(self, request, context):
        """文件锁
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckFilePermission(self, request, context):
        """检查文件权限
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCache(self, request, context):
        """检查缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChownFile(self, request, context):
        """更改文件拥有者
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChmodFile(self, request, context):
        """更改文件权限
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeGroup(self, request, context):
        """更改文件所属组
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_nameserverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDataServer,
                    request_deserializer=nameserver__pb2.DataServerInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'GetDataServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataServerList,
                    request_deserializer=nameserver__pb2.empty.FromString,
                    response_serializer=nameserver__pb2.GetDataServerListResponse.SerializeToString,
            ),
            'LogoutDataServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LogoutDataServer,
                    request_deserializer=nameserver__pb2.DataServerInfo.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=nameserver__pb2.RegisterRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=nameserver__pb2.LoginRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'LockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.LockFile,
                    request_deserializer=nameserver__pb2.LockFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'UnlockFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockFile,
                    request_deserializer=nameserver__pb2.UnlockFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'CheckFilePermission': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckFilePermission,
                    request_deserializer=nameserver__pb2.CheckFilePermissionRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'CheckCache': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCache,
                    request_deserializer=nameserver__pb2.CheckCacheRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'ChownFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ChownFile,
                    request_deserializer=nameserver__pb2.ChownFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'ChmodFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ChmodFile,
                    request_deserializer=nameserver__pb2.ChmodFileRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
            'ChangeGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeGroup,
                    request_deserializer=nameserver__pb2.ChangeGroupRequest.FromString,
                    response_serializer=nameserver__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightdfs.nameserver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class nameserver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/RegisterDataServer',
            nameserver__pb2.DataServerInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/GetDataServerList',
            nameserver__pb2.empty.SerializeToString,
            nameserver__pb2.GetDataServerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogoutDataServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/LogoutDataServer',
            nameserver__pb2.DataServerInfo.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/RegisterUser',
            nameserver__pb2.RegisterRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/Login',
            nameserver__pb2.LoginRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/LockFile',
            nameserver__pb2.LockFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/UnlockFile',
            nameserver__pb2.UnlockFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckFilePermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/CheckFilePermission',
            nameserver__pb2.CheckFilePermissionRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/CheckCache',
            nameserver__pb2.CheckCacheRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChownFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/ChownFile',
            nameserver__pb2.ChownFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChmodFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/ChmodFile',
            nameserver__pb2.ChmodFileRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lightdfs.nameserver/ChangeGroup',
            nameserver__pb2.ChangeGroupRequest.SerializeToString,
            nameserver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
