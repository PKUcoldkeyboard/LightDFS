syntax = "proto3";

import "file.proto";
import "status_code.proto";

package lightdfs;

option cc_generic_services = true;

message ChunkServerInfo {
    int32 id = 1;
    string address = 2;
    string ipaddress = 18;
    string start_time = 17;
    int32 last_heartbeat = 3;
    int64 data_size = 4;
    int64 disk_quota = 5;
    int32 block_num = 7;
    bool is_dead = 8;
    ChunkServerStatus status = 9;
    int32 ip = 10;
    int32 buffers = 11;
    int32 pending_buf = 28;
    int32 pending_recover = 29;
    bool kick = 12;
    string zone = 13;
    string datacenter = 14;
    string rack = 15;
    string tag = 16;
    // running status
    double load = 20;
    int32 w_qps = 21;
    int64 w_speed = 22;
    int32 r_qps = 23;
    int64 r_speed = 24;
    int64 writing_buffers = 25;
    int64 active_blocks = 26;
    int64 recover_speed = 27;
}

message CreateFileRequest {
    int64 sequence_id = 1;
    string file_name = 2;
    int32 mode = 3;
    int32 flags = 4;
    int32 replica_num = 5;
    string user = 7;
}

message CreateFileResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message LocatedBlock {
    int64 block_id = 1;
    int64 block_size = 2;
    repeated ChunkServerInfo chains = 3;
    int32 status = 4;
}

message FileLocationRequest {
    int64 sequence_id = 1;
    string file_name = 2;
    int64 offset = 3;
    int32 block_num = 4;
    string user = 5;
}

message FileLocationResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    repeated LocatedBlock blocks = 3;
}

message ListDirectoryRequest {
    int64 sequence_id = 1;
    string path = 2;
}
message ListDirectoryResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    repeated FileInfo files = 3;
}

message StatRequest {
    int64 sequence_id = 1;
    string path = 2;
}
message StatResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    FileInfo file_info = 3;
}

message RenameRequest {
    int64 sequence_id = 1;
    string oldpath = 2;
    string newpath = 3;
}
message RenameResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message AddBlockRequest {
    int64 sequence_id = 1;
    string file_name = 2;
    string client_address = 3;
}
message AddBlockResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    LocatedBlock block = 3;
}

message SyncBlockRequest {
    int64 sequence_id = 1;
    int64 block_id = 2;
    string file_name = 3;
    int64 size = 4;
}

message SyncBlockResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message FinishBlockRequest {
    int64 sequence_id = 1;
    int64 block_id = 2;
    int64 block_version = 3;
    string file_name = 4;
    int64 block_size = 5;
    bool close_with_error = 6;
}
message FinishBlockResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message UnlinkRequest {
    int64 sequence_id = 1;
    string path = 2;
}
message UnlinkResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message DeleteDirectoryRequest {
    int64 sequence_id = 1;
    string path = 2;
    bool recursive = 3;
}
message DeleteDirectoryResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message ChangeReplicaNumRequest {
    int64 sequence_id = 1;
    string file_name = 2;
    int32 replica_num = 3;
}
message ChangeReplicaNumResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message HeartBeatRequest {
    int64 sequence_id = 1;
    string chunkserver_addr = 2;
    int32 chunkserver_id = 3;
    int64 namespace_version = 4;
    int32 block_num = 5;
    int64 data_size = 6;
    int32 buffers = 7;
    int32 pending_buf = 13;
    int32 pending_recover = 14;
    int32 w_qps = 8;
    int64 w_speed = 9;
    int32 r_qps = 10;
    int64 r_speed = 11;
    int64 recover_speed = 12;
}
message HeartBeatResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    int64 namespace_version = 3;
    bool kick = 4;
    int32 report_interval = 5;
    int32 report_size = 6;
}

message ReportBlockInfo {
    int64 block_id = 1;
    int64 version = 2;
    int64 block_size = 3;
    bool is_recover = 4;
}
message ReplicaInfo {
    int64 block_id = 1;
    repeated string chunkserver_address = 2;
    //int64 block_size = 3;
    //int64 block_version = 4;
    bool priority = 5;
    int32 recover_timeout = 6;
}

message RegisterRequest {
    int64 sequence_id = 1;
    string chunkserver_addr = 3;
    int64 namespace_version = 4;
    string tag = 5;
    int64 disk_quota = 7;
}
message RegisterResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    int32 chunkserver_id = 5;
    int64 namespace_version = 6;
    int32 report_interval = 7;
    int32 report_size = 8;
    int64 report_id = 9;
}

message BlockReportRequest {
    int64 sequence_id = 1;
    int32 chunkserver_id = 2;
    string chunkserver_addr = 3;
    int64 start = 4;
    int64 end = 5;
    repeated ReportBlockInfo blocks = 6;
    int64 report_id = 7;
}
message BlockReportResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    repeated int64 obsolete_blocks = 3;
    repeated int64 close_blocks = 4;
    repeated ReplicaInfo new_replicas = 5;
    int64 report_id = 6;
}

message BlockReceivedRequest {
    int64 sequence_id = 1;
    int32 chunkserver_id = 2;
    string chunkserver_addr = 3;
    repeated ReportBlockInfo blocks = 6;
}

message BlockReceivedResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message PushBlockReportRequest {
    int64 sequence_id = 1;
    int32 chunkserver_id = 2;
    repeated int64 blocks = 3;
    repeated StatusCode status = 4;
}
message PushBlockReportResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message SysStatRequest {
    string stat_name = 2;
}

message SysStatResponse {
    StatusCode status = 2;
    repeated ChunkServerInfo chunkservers = 3;
    int64 block_num = 4;
    int64 data_size = 5;
}

message NsLogEntry {
    int32 type = 1;
    bytes key = 2;
    bytes value = 3;
}

message NameServerLog {
    repeated NsLogEntry entries = 1;
}

message ShutdownChunkServerRequest {
    int64 sequence_id = 1;
    repeated string chunkserver_address = 2;
}

message ShutdownChunkServerResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message ShutdownChunkServerStatRequest {
    int64 sequence_id = 1;
}

message ShutdownChunkServerStatResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    bool in_offline_progress = 3;
}

message DiskUsageRequest {
    int64 sequence_id = 1;
    string path = 2;
}

message DiskUsageResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
    uint64 du_size = 3;
}

message ChmodRequest {
    int64 sequence_id = 1;
    int32 mode = 2;
    string path = 3;
}

message ChmodResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message SymlinkRequest {
    int64 sequence_id = 1;
    string src = 2;
    string dst = 3;
    string user = 4;
}

message SymlinkResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
}

message LockDirRequest {
    int64 sequence_id = 1;
    string dir_path = 2;
    string uuid = 3;
};

message LockDirResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
};

message UnlockDirRequest {
    int64 sequence_id = 1;
    string dir_path = 2;
    string uuid = 3;
};

message UnlockDirResponse {
    int64 sequence_id = 1;
    StatusCode status = 2;
};

service NameServer {
    rpc CreateFile(CreateFileRequest) returns(CreateFileResponse);
    rpc AddBlock(AddBlockRequest) returns(AddBlockResponse);
    rpc GetFileLocation(FileLocationRequest) returns(FileLocationResponse);
    rpc ListDirectory(ListDirectoryRequest) returns(ListDirectoryResponse);
    rpc Stat(StatRequest) returns(StatResponse);
    rpc Rename(RenameRequest) returns(RenameResponse);
    rpc SyncBlock(SyncBlockRequest) returns(SyncBlockResponse);
    rpc FinishBlock(FinishBlockRequest) returns(FinishBlockResponse);
    rpc Unlink(UnlinkRequest) returns(UnlinkResponse);
    rpc DeleteDirectory(DeleteDirectoryRequest) returns(DeleteDirectoryResponse);
    rpc ChangeReplicaNum(ChangeReplicaNumRequest) returns(ChangeReplicaNumResponse);
    rpc ShutdownChunkServer(ShutdownChunkServerRequest) returns(ShutdownChunkServerResponse);
    rpc ShutdownChunkServerStat(ShutdownChunkServerStatRequest) returns(ShutdownChunkServerStatResponse);
    rpc DiskUsage(DiskUsageRequest) returns(DiskUsageResponse);

    rpc Register(RegisterRequest) returns(RegisterResponse);
    rpc HeartBeat(HeartBeatRequest) returns(HeartBeatResponse);
    rpc BlockReport(BlockReportRequest) returns(BlockReportResponse);
    rpc BlockReceived(BlockReceivedRequest) returns(BlockReceivedResponse);
    rpc PushBlockReport(PushBlockReportRequest) returns(PushBlockReportResponse);

    rpc SysStat(SysStatRequest) returns(SysStatResponse);
    rpc Chmod(ChmodRequest) returns(ChmodResponse);
    rpc Symlink(SymlinkRequest) returns(SymlinkResponse);
    rpc LockDir(LockDirRequest) returns(LockDirResponse);
    rpc UnlockDir(UnlockDirRequest) returns(UnlockDirResponse);
}
